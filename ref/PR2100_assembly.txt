//We're just translating triador.cpp on the reference repos
private readonly string[] opcodes_str = new string[] //Operation mnemonics (this is basically assembly) each command takes a 5-trit arguement
{
    /* ----- -121 */ "JMP", // Unconditional jump to memory address SR*27 + argument
    /* ----0 -120 */ "SKP", // Conditonal skip of next command depending on the sign of the register, see implementation for more detail
    /* ----+ -119 */ "NEG", // Negates the argument register
    /* ---0- -118 */ "COP", // Copies a register to CP
    /* ---00 -117 */ "PST", // Pastes CP to a register
    /* -0---  -94 */ "ADD", // Sets R16 to OPA + OPB
    /* -0--0  -93 */ "SUB", // Sets R16 to OPA - OPB
    /* -0-0-  -91 */ "AND", // Sets R16 to OPA AND OPB
    /* -0-00  -90 */ "ORR", // Sets R16 to OPA OR  OPB
    /* -0-0+  -89 */ "XOR", // Sets R16 to OPA XOR OPB
    /* -+---  -67 */ "R01", // Write argument to register 01
    /* -+--0  -66 */ "R02", // Write argument to register 02
    /* -+--+  -65 */ "R03", // Write argument to register 03
    /* -+-0-  -64 */ "R04", // Write argument to register 04
    /* -+-00  -63 */ "RO6", // Write argument to register 05
    /* -+-0+  -62 */ "RO5", // Write argument to register 06
    /* -+-+-  -61 */ "RO7", // Write argument to register 07
    /* -+-+0  -60 */ "R08", // Write argument to register 08
    /* -+-++  -59 */ "R09", // Write argument to register 09
    /* -+0--  -58 */ "R10", // Write argument to register 10
    /* -+0-0  -57 */ "R11", // Write argument to register 11
    /* -+0-+  -56 */ "R12", // Write argument to register 12
    /* -+00-  -55 */ "R13", // Write argument to register 13
    /* -+000  -54 */ "R14", // Write argument to register 14
    /* -+00+  -53 */ "R15", // Write argument to register 15
    /* -+0+-  -52 */ "R16", // Write argument to register 16
};

private Register[] Registers = new Register[]{
    new Register("R01", new TU5("+----")),
    new Register("R02", new TU5("+---0")),
    new Register("R03", new TU5("+---+")),
    new Register("R04", new TU5("+--0-")),
    new Register("R05", new TU5("+--00")),
    new Register("R06", new TU5("+--0+")),
    new Register("R07", new TU5("+--+-")),
    new Register("R08", new TU5("+--+0")),
    new Register("R09", new TU5("+--++")),
    new Register("R10", new TU5("+-0--")),
    new Register("R11", new TU5("+-0-0")),
    new Register("R12", new TU5("+-0-+")),
    new Register("R13", new TU5("+-00-")),
    new Register("R14", new TU5("+-000")),
    new Register("R15", new TU5("+-00+")),
    new Register("R16", new TU5("+-0+-")), //This is where the result of an ALU command is stored
};

private Register OPA = new Register("OPA", new TU5("+-0+0"));   //Operand A register
private Register OPB = new Register("OPB", new TU5("+-0++"));   //Operand B register

private Register SR = new Register("SR", new TU5("+-+--"));     //Sector register, the first tryte of a memory address, covers 243 individual addresses
private Register CP = new Register("CP", new TU5("+-+-0"));     //Clipboard register, used to copy or paste data between registers
private Register CT = new Register("CT", new TU5("+-+-+"));     //Carry Trit register, used to store the left over trit from an ALU command

private Register P1I = new Register("P1I", new TU5("+-+0-"));   //Stores the instruction for the executing command
private Register P1A = new Register("P1A", new TU5("+-+00"));   //Stores the arguement for the executing command
private Register P2I = new Register("P2I", new TU5("+-+0+"));   //Stores the instruction for the executing command
private Register P2A = new Register("P2A", new TU5("+-++-"));   //Stores the arguement for the executing command

private Register CSR = new Register("CSR", new TU5("+-++0"));   //Sector Register Counter, keeps track of the current instruction's sector
private Register CIR = new Register("CIR", new TU5("+-+++"));   //Instruction Register Counter, keeps track of the current instruction's specific address